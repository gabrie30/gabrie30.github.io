<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
        <title>DCoded</title>
        <description>DCoded - Jay Gabez</description>
        <link>http://gabrie30.github.io</link>
        <atom:link href="http://gabrie30.github.io/rss.xml" rel="self" type="application/rss+xml" />
        <lastBuildDate>Thu, 13 Aug 2015 16:20:15 -0700</lastBuildDate>
        <pubDate>Thu, 13 Aug 2015 16:20:15 -0700</pubDate>
        <ttl>60</ttl>


        <item>
                <title>Backbone Code Organization</title>
                <description>
&lt;h2 id=&quot;code-organization-in-backbonejs&quot;&gt;Code Organization in Backbone.js&lt;/h2&gt;

&lt;p&gt;One of the hardest thing for me to figure out with Backbone is how to organize my code. The philosophy of backbone is that there is no correct or incorret way. You are free to organize it however you wish. This leaves a lot up to the programmer and quite frankly if you’re not experience with this sort of thing, can be absolutely overwhelming.&lt;/p&gt;

&lt;p&gt;The way I’ve been starting to think about my oranization is thinking about how the DOM itself is organized. The DOM is essentially one large tree, with the root being the HTML tag. In most of my backbone apps this would be my index page. However inside the index page I will have several subviews, the even perhaps within a subview, I will have a subview of the subview.&lt;/p&gt;

&lt;p&gt;My index view’s template will mostly have empty divs. I will then use the subviews to populate those divs. This pattern continues down the subview chain.&lt;/p&gt;

&lt;p&gt;The only time I replace the contents of the DOM completely is when the user is being redirected to something like the about page. This type of manipulation would be done ony in the router.&lt;/p&gt;

&lt;p&gt;Another aspect of code organization that has helped me out is fetching my collection before initializing the app. That way once the app loads I already have all of the models that are stored in the database. Another benefits is that I have access to all the models anywhere in the application. Typically I will store it in something like…MyAppName.Collections.myCollection, which I can then call collection methods on from anywhere in my application.&lt;/p&gt;

&lt;p&gt;Thinking about how you should organize your code in backbone is fun since there are so many possibilies. I think the best way to figure out what works best for you is just to experiment. So remember to have fun!&lt;/p&gt;

&lt;p&gt;If you have any tips, best practies, or resources please leave them in the comments below!&lt;/p&gt;
</description>
                <link>http://gabrie30.github.io/backbone/2015/08/13/Backbone-Code-Organization</link>
                <guid>http://gabrie30.github.io/backbone/2015/08/13/Backbone-Code-Organization</guid>
                <pubDate>Thu, 13 Aug 2015 00:00:00 -0700</pubDate>
        </item>

        <item>
                <title>Using Rails Associations In Backbone</title>
                <description>
&lt;h2 id=&quot;associations-in-backbonejs&quot;&gt;Associations in Backbone.js&lt;/h2&gt;

&lt;p&gt;I wanted to go over how you can set up associations in your backbone app. This is an important aspect to know when using rails as an api for a backbone app. I couldn’t find any good guides out there so I thought I’d write my own, hopefully this will help fill the void.&lt;/p&gt;

&lt;p&gt;As a fair warning the example app I’m using was just for my own experimention and learning. I was making things up as I went, so the naming conventions are terrible. Moving on!&lt;/p&gt;

&lt;h3 id=&quot;schema&quot;&gt;Schema&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/schema.png&quot; alt=&quot;schema&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So Someitems have items and many Todos. Todos belong to Someitems. Great, now in the controller we can do something like…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
  @something = Someitem.first
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
  @something.todos
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will give us all of the todos for Someitem. Great, not much interesting here just basic rails associations. Now our goal is to get this data over to backbone. We’re going to do that using JBuilder.&lt;/p&gt;

&lt;p&gt;If check out this Railscast on &lt;a href=&quot;https://www.youtube.com/watch?v=52jERwqKNE0&quot;&gt;JBuilder&lt;/a&gt; if you’re not familiar. It will allow you to use json in the rails views. Notice in the controller (line 21) how I commented out the normal way to render json. With JBuilder we can have more control over the JSON and we can use rails views as normal.&lt;/p&gt;

&lt;h3 id=&quot;controller&quot;&gt;Controller&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/controller.png&quot; alt=&quot;controller&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now just create a views/todos/show.json.jbuilder and we can pull out whatever JSON we want.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
json.(@something, :id, :item, :created_at, :updated_at)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
json.todos(@todos, :id, :title, :created_at, :updated_at)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the result of the JBuilder from above.&lt;/p&gt;

&lt;h3 id=&quot;rendered-json&quot;&gt;Rendered JSON&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/json.png&quot; alt=&quot;json&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now what we have to do is get this JSON into our backbone app. I’m sure there is a better way to do this so if you know, leave it in the comments below.&lt;/p&gt;

&lt;p&gt;The first thing I did was change the routes file so I can just use the something/1, to grab the something data, and something/1/todo to grab all of its todos.&lt;/p&gt;

&lt;h3 id=&quot;routes&quot;&gt;Routes&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/routes.png&quot; alt=&quot;routes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The models and collections are straightforward.&lt;/p&gt;

&lt;h3 id=&quot;collections&quot;&gt;Collections&lt;/h3&gt;

&lt;p&gt;-&lt;img src=&quot;/images/todocollection.png&quot; alt=&quot;todocollection&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The cool thing here is line 9. You can turn the url into a fucntion. That way all you need is the something id to access the todos for that specific id. We’ll get the something id by passing a something in as an option when we initialize the collection. See the models section to make this more clear.&lt;/p&gt;

&lt;p&gt;-&lt;img src=&quot;/images/somethingcollection.png&quot; alt=&quot;somethingcollection&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;models&quot;&gt;Models&lt;/h3&gt;

&lt;p&gt;-&lt;img src=&quot;/images/todomodel.png&quot; alt=&quot;todomodel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On line 4 we create a todos function. This will serve as our hook into a somethings todos. In rails we would write something.todos, in backbone we will write something.todos() where the todos() function will return a collection of todos that is specific to that something.&lt;/p&gt;

&lt;p&gt;-&lt;img src=&quot;/images/somethingmodel.png&quot; alt=&quot;somethingmodel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That is the basic gist of how to create associations in backbone. Hopefully this helps someone.&lt;/p&gt;

</description>
                <link>http://gabrie30.github.io/ruby%20on%20rails/2015/07/31/Using-Rails-Associations-In-Backbone</link>
                <guid>http://gabrie30.github.io/ruby%20on%20rails/2015/07/31/Using-Rails-Associations-In-Backbone</guid>
                <pubDate>Fri, 31 Jul 2015 00:00:00 -0700</pubDate>
        </item>

        <item>
                <title>Using Bcrypt With Rails</title>
                <description>
&lt;h2 id=&quot;the-wonders-of-bcrypt&quot;&gt;The Wonders of BCrypt&lt;/h2&gt;

&lt;p&gt;If you are tinkering around with creating your own authenticaion BCrypt is a wonderful gem to use for the job. Although I would reccomend that if you are building something is not for learning purposes that you stick with one of the numerous auth gems that are tried and true.&lt;/p&gt;

&lt;p&gt;That being said if you are still looking for the rush tha comes along with building your own auth lets go over how to use BCrypt.&lt;/p&gt;

&lt;p&gt;First things first, lets install the gem, which can be a little bit tricky.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
gem &#39;bcrypt-ruby&#39;, require: &#39;bcrypt&#39;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There are a few handy methods that will accomplish mostly what we want.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
bc_obj = BCrypt::Password.create(“actualPassword123”)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The nice thing about BCrypt is that the password digest will be salted for us…Our users can thank us later!&lt;/p&gt;

&lt;p&gt;This creates a password digest object that we can save to the database, and also call other BCrypt methods on.&lt;/p&gt;

&lt;p&gt;This is an important point and one that can easily trip you up. When you save this object to the database, it will be saved as a string. So, when you fetch a users password digest for authentication, you cannot call methods on it. So what you need to do is turn the string back into a BCrypt object. Heres how…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
bc_obj = BCrypt::Password.new(password_digest)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you’re back to a BCrypt object! Now that we have an object we can call methods on it. Most likely you are going to want to use the password that a user submits to a login form. To see if the password they entered is the same as the password in the database you can use&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
(bc_obj).is_password?(&quot;password-user-entered-in-form&quot;)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will return true or false depending on if the passwords match.&lt;/p&gt;
</description>
                <link>http://gabrie30.github.io/ruby%20on%20rails/2015/07/17/Using-BCrypt-With-Rails</link>
                <guid>http://gabrie30.github.io/ruby%20on%20rails/2015/07/17/Using-BCrypt-With-Rails</guid>
                <pubDate>Fri, 17 Jul 2015 00:00:00 -0700</pubDate>
        </item>


</channel>
</rss>
